/* ==========================================================================
   #WIDTHS
   ========================================================================== */

/**
 * inuitcss generates a series of utility classes that give a fluid width to
 * whichever element theyâ€™re applied, e.g.:
 *
 *   <img src="" alt="" class="u-1/2" />
 *
 * These classes are most commonly used in conjunction with our layout system,
 * e.g.:
 *
 *   <div class="o-layout__item  u-1/2">
 *
 * By default, inuitcss will also generate responsive variants of each of these
 * classes by using your Sass MQ configuration, e.g.:
 *
 *   <div class="o-layout__item  u-1/1  u-1/2@tablet  u-1/3@desktop">
 *
 * Optionally, inuitcss can generate offset classes which can push and pull
 * elements left and right by a specified amount, e.g.:
 *
 *   <div class="o-layout__item  u-2/3  u-pull-1/3">
 *
 * This is useful for making very granular changes to the rendered order of
 * items in a layout.
 *
 * N.B. This option is turned off by default.
 */

// Which fractions would you like in your grid system(s)? By default, inuitcss
// provides you fractions of one whole, halves, thirds, quarters and fifths,
// e.g.:
//
//   .u-1/2
//   .u-2/5
//   .u-3/4
//   .u-2/3
@fractions: 8;

// Without Breakpoints
.generate-widths(@fractions: 0, @breakpoint: null) when (@breakpoint = null) {
  .i-loop (@i) when (@i > 0) {
    .j-loop (@j) when (@j > 0) {
      .u-@{j}\/@{i} {
        width: (@j / @i) * 100% !important;
      }

       // Build a class in the format `.u-push-1/2`.
      .u-push-@{j}\/@{i} {
        position: relative !important;
        right: auto !important; /* [1] */
        left: (@j / @i) * 100% !important;
      }

       // Build a class in the format `.u-pull-5/6`.
      .u-pull-@{j}\/@{i} {
        position: relative !important;
        right: (@j / @i) * 100% !important;
        left: auto !important; /* [1] */
      }
      .j-loop(@j - 1);
    }

    .j-loop(@i);
    .i-loop(@i - 1);
  }

  .i-loop(@fractions);
}

// Default all the other breakpoints
.generate-widths(@fractions: 0, @breakpoint: null) when (default()) {
  @media (min-width: @@breakpoint) {
    .i-loop (@i) when (@i > 0) {
      .j-loop (@j) when (@j > 0) {
        // Build class in the format `.u-1/2[@<breakpoint>]`
        .u-@{j}\/@{i}\@@{breakpoint} {
          width: (@j / @i) * 100% !important;
        }

        // Build a class in the format `.u-push-1/2[@<breakpoint>]`.
        .u-push-@{j}\/@{i}\@@{breakpoint} {
          position: relative !important;
          right: auto !important; /* [1] */
          left: (@j / @i) * 100% !important;
        }

        // Build a class in the format `.u-pull-5/6[@<breakpoint>]`.
        .u-pull-@{j}\/@{i}\@@{breakpoint} {
          position: relative !important;
          right: (@j / @i) * 100% !important;
          left: auto !important; /* [1] */
        }
        .j-loop(@j - 1);
      }

      .j-loop(@i);
      .i-loop(@i - 1);
    }

    .i-loop(@fractions);
  }
}

.generate-widths(@fractions);
.generate-widths(@fractions, sm);
.generate-widths(@fractions, md);
.generate-widths(@fractions, lg);
.generate-widths(@fractions, xl);
