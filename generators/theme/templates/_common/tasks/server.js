/* eslint-env node, es6 */
const browserSync = require('browser-sync');
const fs = require('fs-extra');
const {phpMiddleware, paths, dir, getHost, swSetHost} = require('./helper/utils');
const {isProd, getOption} = require('./helper/env');
const getport = require('getport');
const opn = require('opn');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const pkg = require('../package.json');

const watchOptions = getOption('docker') ? {
  usePolling: true,
  interval: 500,
  alwaysStat: true
} : {};

/**
 * Browsersync config based on env
 */
const options = {
  server: {
    baseDir: isProd() ? paths.root : [paths.tmp, dir('tmp', 'frontend/_resources'), paths.src, paths.root]
  },
  watchTask: !isProd(),
  notify: !isProd(),
  host: getHost(),
  open: false,
  watchOptions: watchOptions,
  ghostMode: {
    clicks: true,
    scroll: true,
    links: true,
    forms: true
  }
};

/**
 * Browsersync instance
 */
const bs = browserSync.create(pkg.name || 'shopware');

/**
 * Serve task based on environment
 * @param cb
 */
const serve = cb => done => {
  const config = require('../webpack.config.js');
  const bundler = webpack(config);
  const middleware = [
    webpackDevMiddleware(bundler, {
      watchOptions: watchOptions,
      publicPath: config.output.publicPath,
      stats: {colors: true}
    }),
    webpackHotMiddleware(bundler)
  ];

  // Place empty service worker in .tmp so it doesn't interfere with our development process ;)
  if (!isProd()) {
    fs.outputFileSync(
      dir('tmp', 'service-worker.js'),
      `
      // This file is intentionally without code.
      // It's present so that service worker registration will work when serving from the 'src' directory.
      // The version of service-worker.js that's present in the 'dist' directory is automatically
      // generated by the 'generate-service-worker' gulp task, and contains code to precache resources.
    `
    );
  }

  // Get free port and fire up browsersync
  getport(8000, 8999, (err, port) => {
    if (err) {
      return cb(err);
    }

    const exit = bs.exit;
    const bsport = getOption('docker') ? 8000 : port;
    bs.init({...options, port: bsport, middleware: [...middleware, phpMiddleware()]}, (err, bs) => {
      if (err) {
        return cb(err);
      }

      // Stop browsersync and reset shopware host configuration on exit
      process.on('SIGINT', () => {
        exit();
        swSetHost.sync(getOption('host'));
        process.exit(0);
      });

      let host = bs.getOption('host');
      if (getOption('docker') && getOption('host')) {
        host = getOption('host');
      }

      // Set shopware host configuration to browsersync server address
      swSetHost(host, bs.getOption('port')).then(() => {
        if (!getOption('docker')) {
          opn('http://' + bs.getOption('host') + ':' + bs.getOption('port'));
        }
        if (cb) {
          cb(done);
        }
      });
    });
  });
};

module.exports = {
  bs,
  serve
};
